{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahv\\\\Documents\\\\real-time-traffic\\\\frontend\\\\src\\\\components\\\\TrafficMap.js\",\n  _s = $RefreshSig$();\n// src/components/TrafficMap.js\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './TrafficMap.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrafficMap = ({\n  trafficData\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const congestionThreshold = 30; // Threshold speed for congestion in mph\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([40.7128, -74.0060], 13);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapRef.current);\n    }\n    trafficData.forEach(data => {\n      if (data.location) {\n        const isCongested = parseFloat(data.speed) < congestionThreshold;\n        const markerColor = isCongested ? 'red' : 'green';\n        const marker = L.circleMarker([data.location.latitude, data.location.longitude], {\n          color: markerColor\n        }).addTo(mapRef.current);\n        marker.bindPopup(`Speed: ${data.speed} mph<br>Time: ${data.data_as_of}`);\n      }\n    });\n  }, [trafficData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-Time Traffic Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This map displays real-time traffic data. Congested areas are marked in red, while free-flowing traffic is indicated in green.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      className: \"traffic-map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(TrafficMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = TrafficMap;\nexport default TrafficMap;\nvar _c;\n$RefreshReg$(_c, \"TrafficMap\");","map":{"version":3,"names":["React","useEffect","useRef","L","jsxDEV","_jsxDEV","TrafficMap","trafficData","_s","mapRef","congestionThreshold","current","map","setView","tileLayer","addTo","forEach","data","location","isCongested","parseFloat","speed","markerColor","marker","circleMarker","latitude","longitude","color","bindPopup","data_as_of","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/shahv/Documents/real-time-traffic/frontend/src/components/TrafficMap.js"],"sourcesContent":["// src/components/TrafficMap.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './TrafficMap.css'; // Assuming you have a CSS file for styling\r\n\r\nconst TrafficMap = ({ trafficData }) => {\r\n    const mapRef = useRef(null);\r\n    const congestionThreshold = 30; // Threshold speed for congestion in mph\r\n\r\n    useEffect(() => {\r\n        if (!mapRef.current) {\r\n            mapRef.current = L.map('map').setView([40.7128, -74.0060], 13);\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapRef.current);\r\n        }\r\n\r\n        trafficData.forEach(data => {\r\n            if (data.location) {\r\n                const isCongested = parseFloat(data.speed) < congestionThreshold;\r\n                const markerColor = isCongested ? 'red' : 'green';\r\n                const marker = L.circleMarker(\r\n                    [data.location.latitude, data.location.longitude], \r\n                    { color: markerColor }\r\n                ).addTo(mapRef.current);\r\n\r\n                marker.bindPopup(`Speed: ${data.speed} mph<br>Time: ${data.data_as_of}`);\r\n            }\r\n        });\r\n    }, [trafficData]);\r\n\r\n    return (\r\n        <div className=\"traffic-map-container\">\r\n            <h2>Real-Time Traffic Map</h2>\r\n            <p>This map displays real-time traffic data. Congested areas are marked in red, while free-flowing traffic is indicated in green.</p>\r\n            <div id=\"map\" className=\"traffic-map\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrafficMap;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAO,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMQ,mBAAmB,GAAG,EAAE,CAAC,CAAC;;EAEhCT,SAAS,CAAC,MAAM;IACZ,IAAI,CAACQ,MAAM,CAACE,OAAO,EAAE;MACjBF,MAAM,CAACE,OAAO,GAAGR,CAAC,CAACS,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;MAC9DV,CAAC,CAACW,SAAS,CAAC,oDAAoD,CAAC,CAACC,KAAK,CAACN,MAAM,CAACE,OAAO,CAAC;IAC3F;IAEAJ,WAAW,CAACS,OAAO,CAACC,IAAI,IAAI;MACxB,IAAIA,IAAI,CAACC,QAAQ,EAAE;QACf,MAAMC,WAAW,GAAGC,UAAU,CAACH,IAAI,CAACI,KAAK,CAAC,GAAGX,mBAAmB;QAChE,MAAMY,WAAW,GAAGH,WAAW,GAAG,KAAK,GAAG,OAAO;QACjD,MAAMI,MAAM,GAAGpB,CAAC,CAACqB,YAAY,CACzB,CAACP,IAAI,CAACC,QAAQ,CAACO,QAAQ,EAAER,IAAI,CAACC,QAAQ,CAACQ,SAAS,CAAC,EACjD;UAAEC,KAAK,EAAEL;QAAY,CACzB,CAAC,CAACP,KAAK,CAACN,MAAM,CAACE,OAAO,CAAC;QAEvBY,MAAM,CAACK,SAAS,CAAE,UAASX,IAAI,CAACI,KAAM,iBAAgBJ,IAAI,CAACY,UAAW,EAAC,CAAC;MAC5E;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,oBACIF,OAAA;IAAKyB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBAClC1B,OAAA;MAAA0B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B9B,OAAA;MAAA0B,QAAA,EAAG;IAA8H;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACrI9B,OAAA;MAAK+B,EAAE,EAAC,KAAK;MAACN,SAAS,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEd,CAAC;AAAC3B,EAAA,CA/BIF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAiChB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}