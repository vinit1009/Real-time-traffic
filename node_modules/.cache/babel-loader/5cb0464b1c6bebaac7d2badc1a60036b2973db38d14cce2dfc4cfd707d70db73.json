{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahv\\\\Documents\\\\real-time-traffic\\\\frontend\\\\src\\\\components\\\\LineChart.js\",\n  _s = $RefreshSig$();\n// src/components/LineChart.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n// Add this import\nimport 'chartjs-adapter-date-fns';\nimport './LineChart.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst LineChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const fetchTrafficData = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/traffic_data/time_series');\n      const data = await response.json();\n      if (data && Array.isArray(data)) {\n        setChartData({\n          labels: data.map(item => new Date(item.timestamp).toLocaleString()),\n          datasets: [{\n            label: 'Average Traffic Speed',\n            data: data.map(item => item.average_speed),\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1,\n            tension: 0.4 // Adds some curve to the line\n          }]\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching traffic data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTrafficData();\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true\n      },\n      title: {\n        display: true,\n        text: 'Traffic Speed Over Time'\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          parser: 'yyyy-MM-dd',\n          tooltipFormat: 'PP'\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Speed (mph)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-Time Traffic Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This chart displays the average traffic speed over time.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(LineChart, \"vFl75c0wuDM/Dyf/dbvhC0PYyRE=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","LineChart","_s","chartData","setChartData","labels","datasets","fetchTrafficData","response","fetch","data","json","Array","isArray","map","item","Date","timestamp","toLocaleString","label","average_speed","backgroundColor","borderColor","borderWidth","tension","error","console","options","responsive","plugins","legend","display","title","text","scales","x","type","time","parser","tooltipFormat","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shahv/Documents/real-time-traffic/frontend/src/components/LineChart.js"],"sourcesContent":["// src/components/LineChart.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n// Add this import\r\nimport 'chartjs-adapter-date-fns';\r\n\r\n\r\nimport './LineChart.css'; // Assuming you have a CSS file for styling\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst LineChart = () => {\r\n    const [chartData, setChartData] = useState({\r\n        labels: [],\r\n        datasets: [],\r\n    });\r\n\r\n    const fetchTrafficData = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/traffic_data/time_series');\r\n            const data = await response.json();\r\n            if (data && Array.isArray(data)) {\r\n                setChartData({\r\n                    labels: data.map(item => new Date(item.timestamp).toLocaleString()),\r\n                    datasets: [\r\n                        {\r\n                            label: 'Average Traffic Speed',\r\n                            data: data.map(item => item.average_speed),\r\n                            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                            borderColor: 'rgba(54, 162, 235, 1)',\r\n                            borderWidth: 1,\r\n                            tension: 0.4, // Adds some curve to the line\r\n                        },\r\n                    ],\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching traffic data:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTrafficData();\r\n    }, []);\r\n\r\n    const options = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: {\r\n            display: true,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Traffic Speed Over Time',\r\n        },\r\n    },\r\n    scales: {\r\n        x: {\r\n            type: 'time',\r\n            time: {\r\n                parser: 'yyyy-MM-dd',\r\n                tooltipFormat: 'PP',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Date',\r\n            },\r\n        },\r\n        y: {\r\n            title: {\r\n                display: true,\r\n                text: 'Speed (mph)',\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\n\r\n    return (\r\n        <div className=\"line-chart-container\">\r\n            <h2>Real-Time Traffic Analysis</h2>\r\n            <p>This chart displays the average traffic speed over time.</p>\r\n            <div className=\"chart\">\r\n                <Line data={chartData} options={options} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LineChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}