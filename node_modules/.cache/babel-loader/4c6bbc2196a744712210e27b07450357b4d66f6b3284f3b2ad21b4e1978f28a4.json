{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahv\\\\Documents\\\\real-time-traffic\\\\frontend\\\\src\\\\components\\\\TrafficMap.js\",\n  _s = $RefreshSig$();\n// src/components/TrafficMap.js\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrafficMap = ({\n  trafficData\n}) => {\n  _s();\n  const mapRef = useRef(null);\n\n  // Define a threshold speed for congestion (in mph)\n  const congestionThreshold = 30; // Example value\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([40.7128, -74.0060], 13);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapRef.current);\n    }\n    let totalSpeed = 0;\n    let congestedPoints = 0;\n    trafficData.forEach(data => {\n      if (data.location) {\n        const isCongested = parseFloat(data.speed) < congestionThreshold;\n        const markerColor = isCongested ? 'red' : 'green';\n        const marker = L.circleMarker([data.location.latitude, data.location.longitude], {\n          color: markerColor\n        }).addTo(mapRef.current);\n        marker.bindPopup(`Speed: ${data.speed} mph<br>Time: ${data.data_as_of}`);\n        if (isCongested) {\n          totalSpeed += parseFloat(data.speed);\n          congestedPoints++;\n        }\n      }\n    });\n    const avgSpeedInCongestion = congestedPoints > 0 ? (totalSpeed / congestedPoints).toFixed(2) : \"N/A\";\n    alert(`Average Speed in Congested Areas: ${avgSpeedInCongestion} mph`);\n  }, [trafficData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n_s(TrafficMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = TrafficMap;\nexport default TrafficMap;\nvar _c;\n$RefreshReg$(_c, \"TrafficMap\");","map":{"version":3,"names":["React","useEffect","useRef","L","jsxDEV","_jsxDEV","TrafficMap","trafficData","_s","mapRef","congestionThreshold","current","map","setView","tileLayer","addTo","totalSpeed","congestedPoints","forEach","data","location","isCongested","parseFloat","speed","markerColor","marker","circleMarker","latitude","longitude","color","bindPopup","data_as_of","avgSpeedInCongestion","toFixed","alert","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shahv/Documents/real-time-traffic/frontend/src/components/TrafficMap.js"],"sourcesContent":["// src/components/TrafficMap.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst TrafficMap = ({ trafficData }) => {\r\n    const mapRef = useRef(null);\r\n\r\n    // Define a threshold speed for congestion (in mph)\r\n    const congestionThreshold = 30; // Example value\r\n\r\n    useEffect(() => {\r\n        if (!mapRef.current) {\r\n            mapRef.current = L.map('map').setView([40.7128, -74.0060], 13);\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapRef.current);\r\n        }\r\n\r\n        let totalSpeed = 0;\r\n        let congestedPoints = 0;\r\n\r\n        trafficData.forEach(data => {\r\n            if (data.location) {\r\n                const isCongested = parseFloat(data.speed) < congestionThreshold;\r\n                const markerColor = isCongested ? 'red' : 'green';\r\n                const marker = L.circleMarker(\r\n                    [data.location.latitude, data.location.longitude], \r\n                    { color: markerColor }\r\n                ).addTo(mapRef.current);\r\n\r\n                marker.bindPopup(`Speed: ${data.speed} mph<br>Time: ${data.data_as_of}`);\r\n\r\n                if (isCongested) {\r\n                    totalSpeed += parseFloat(data.speed);\r\n                    congestedPoints++;\r\n                }\r\n            }\r\n        });\r\n\r\n        const avgSpeedInCongestion = (congestedPoints > 0) ? (totalSpeed / congestedPoints).toFixed(2) : \"N/A\";\r\n        alert(`Average Speed in Congested Areas: ${avgSpeedInCongestion} mph`);\r\n        \r\n    }, [trafficData]);\r\n\r\n    return <div id=\"map\" style={{ height: '500px' }} />;\r\n};\r\n\r\nexport default TrafficMap;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;;EAE3B;EACA,MAAMQ,mBAAmB,GAAG,EAAE,CAAC,CAAC;;EAEhCT,SAAS,CAAC,MAAM;IACZ,IAAI,CAACQ,MAAM,CAACE,OAAO,EAAE;MACjBF,MAAM,CAACE,OAAO,GAAGR,CAAC,CAACS,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;MAC9DV,CAAC,CAACW,SAAS,CAAC,oDAAoD,CAAC,CAACC,KAAK,CAACN,MAAM,CAACE,OAAO,CAAC;IAC3F;IAEA,IAAIK,UAAU,GAAG,CAAC;IAClB,IAAIC,eAAe,GAAG,CAAC;IAEvBV,WAAW,CAACW,OAAO,CAACC,IAAI,IAAI;MACxB,IAAIA,IAAI,CAACC,QAAQ,EAAE;QACf,MAAMC,WAAW,GAAGC,UAAU,CAACH,IAAI,CAACI,KAAK,CAAC,GAAGb,mBAAmB;QAChE,MAAMc,WAAW,GAAGH,WAAW,GAAG,KAAK,GAAG,OAAO;QACjD,MAAMI,MAAM,GAAGtB,CAAC,CAACuB,YAAY,CACzB,CAACP,IAAI,CAACC,QAAQ,CAACO,QAAQ,EAAER,IAAI,CAACC,QAAQ,CAACQ,SAAS,CAAC,EACjD;UAAEC,KAAK,EAAEL;QAAY,CACzB,CAAC,CAACT,KAAK,CAACN,MAAM,CAACE,OAAO,CAAC;QAEvBc,MAAM,CAACK,SAAS,CAAE,UAASX,IAAI,CAACI,KAAM,iBAAgBJ,IAAI,CAACY,UAAW,EAAC,CAAC;QAExE,IAAIV,WAAW,EAAE;UACbL,UAAU,IAAIM,UAAU,CAACH,IAAI,CAACI,KAAK,CAAC;UACpCN,eAAe,EAAE;QACrB;MACJ;IACJ,CAAC,CAAC;IAEF,MAAMe,oBAAoB,GAAIf,eAAe,GAAG,CAAC,GAAI,CAACD,UAAU,GAAGC,eAAe,EAAEgB,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK;IACtGC,KAAK,CAAE,qCAAoCF,oBAAqB,MAAK,CAAC;EAE1E,CAAC,EAAE,CAACzB,WAAW,CAAC,CAAC;EAEjB,oBAAOF,OAAA;IAAK8B,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvD,CAAC;AAACjC,EAAA,CAvCIF,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAyChB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}