{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahv\\\\Documents\\\\real-time-traffic\\\\frontend\\\\src\\\\components\\\\TrafficMap.js\",\n  _s = $RefreshSig$();\n// src/components/TrafficMap.js\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport polyline from '@mapbox/polyline';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrafficMap = ({\n  trafficData\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const getRoadColor = speed => {\n    if (speed < 20) return 'red'; // Congested\n    if (speed < 40) return 'orange'; // Slow\n    return 'green'; // Normal\n  };\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([40.7128, -74.0060], 13);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapRef.current);\n    }\n    trafficData.forEach(data => {\n      if (data.encoded_poly_line) {\n        const decodedPath = polyline.decode(data.encoded_poly_line);\n        const latLngs = decodedPath.map(point => ({\n          lat: point[0],\n          lng: point[1]\n        }));\n        const roadColor = getRoadColor(parseFloat(data.speed));\n        L.polyline(latLngs, {\n          color: roadColor\n        }).addTo(mapRef.current);\n      }\n    });\n  }, [trafficData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n};\n_s(TrafficMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = TrafficMap;\nexport default TrafficMap;\nvar _c;\n$RefreshReg$(_c, \"TrafficMap\");","map":{"version":3,"names":["React","useEffect","useRef","L","polyline","jsxDEV","_jsxDEV","TrafficMap","trafficData","_s","mapRef","getRoadColor","speed","current","map","setView","tileLayer","addTo","forEach","data","encoded_poly_line","decodedPath","decode","latLngs","point","lat","lng","roadColor","parseFloat","color","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shahv/Documents/real-time-traffic/frontend/src/components/TrafficMap.js"],"sourcesContent":["// src/components/TrafficMap.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport polyline from '@mapbox/polyline';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst TrafficMap = ({ trafficData }) => {\r\n    const mapRef = useRef(null);\r\n\r\n    const getRoadColor = (speed) => {\r\n        if (speed < 20) return 'red';       // Congested\r\n        if (speed < 40) return 'orange';    // Slow\r\n        return 'green';                     // Normal\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!mapRef.current) {\r\n            mapRef.current = L.map('map').setView([40.7128, -74.0060], 13);\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mapRef.current);\r\n        }\r\n\r\n        trafficData.forEach(data => {\r\n            if (data.encoded_poly_line) {\r\n                const decodedPath = polyline.decode(data.encoded_poly_line);\r\n                const latLngs = decodedPath.map(point => ({ lat: point[0], lng: point[1] }));\r\n                const roadColor = getRoadColor(parseFloat(data.speed));\r\n                \r\n                L.polyline(latLngs, { color: roadColor }).addTo(mapRef.current);\r\n            }\r\n        });\r\n    }, [trafficData]);\r\n\r\n    return <div id=\"map\" style={{ height: '500px' }} />;\r\n};\r\n\r\nexport default TrafficMap;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE3B,MAAMS,YAAY,GAAIC,KAAK,IAAK;IAC5B,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,KAAK,CAAC,CAAO;IACpC,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,QAAQ,CAAC,CAAI;IACpC,OAAO,OAAO,CAAC,CAAqB;EACxC,CAAC;EAEDX,SAAS,CAAC,MAAM;IACZ,IAAI,CAACS,MAAM,CAACG,OAAO,EAAE;MACjBH,MAAM,CAACG,OAAO,GAAGV,CAAC,CAACW,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;MAC9DZ,CAAC,CAACa,SAAS,CAAC,oDAAoD,CAAC,CAACC,KAAK,CAACP,MAAM,CAACG,OAAO,CAAC;IAC3F;IAEAL,WAAW,CAACU,OAAO,CAACC,IAAI,IAAI;MACxB,IAAIA,IAAI,CAACC,iBAAiB,EAAE;QACxB,MAAMC,WAAW,GAAGjB,QAAQ,CAACkB,MAAM,CAACH,IAAI,CAACC,iBAAiB,CAAC;QAC3D,MAAMG,OAAO,GAAGF,WAAW,CAACP,GAAG,CAACU,KAAK,KAAK;UAAEC,GAAG,EAAED,KAAK,CAAC,CAAC,CAAC;UAAEE,GAAG,EAAEF,KAAK,CAAC,CAAC;QAAE,CAAC,CAAC,CAAC;QAC5E,MAAMG,SAAS,GAAGhB,YAAY,CAACiB,UAAU,CAACT,IAAI,CAACP,KAAK,CAAC,CAAC;QAEtDT,CAAC,CAACC,QAAQ,CAACmB,OAAO,EAAE;UAAEM,KAAK,EAAEF;QAAU,CAAC,CAAC,CAACV,KAAK,CAACP,MAAM,CAACG,OAAO,CAAC;MACnE;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC;EAEjB,oBAAOF,OAAA;IAAKwB,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvD,CAAC;AAAC3B,EAAA,CA3BIF,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AA6BhB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}