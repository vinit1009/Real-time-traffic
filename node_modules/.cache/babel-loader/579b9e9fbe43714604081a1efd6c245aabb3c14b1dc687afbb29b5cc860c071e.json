{"ast":null,"code":"'use strict';\n\n/**\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\nvar polyline = {};\nfunction py2_round(value) {\n  // Google's polyline algorithm uses the same rounding strategy as Python 2, which is different from JS for negative values\n  return Math.floor(Math.abs(value) + 0.5) * (value >= 0 ? 1 : -1);\n}\nfunction encode(current, previous, factor) {\n  current = py2_round(current * factor);\n  previous = py2_round(previous * factor);\n  var coordinate = (current - previous) * 2;\n  if (coordinate < 0) {\n    coordinate = -coordinate - 1;\n  }\n  var output = '';\n  while (coordinate >= 0x20) {\n    output += String.fromCharCode((0x20 | coordinate & 0x1f) + 63);\n    coordinate /= 32;\n  }\n  output += String.fromCharCode((coordinate | 0) + 63);\n  return output;\n}\n\n/**\n * Decodes to a [latitude, longitude] coordinates array.\n *\n * This is adapted from the implementation in Project-OSRM.\n *\n * @param {String} str\n * @param {Number} precision\n * @returns {Array}\n *\n * @see https://github.com/Project-OSRM/osrm-frontend/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\n */\npolyline.decode = function (str, precision) {\n  var index = 0,\n    lat = 0,\n    lng = 0,\n    coordinates = [],\n    shift = 0,\n    result = 0,\n    byte = null,\n    latitude_change,\n    longitude_change,\n    factor = Math.pow(10, Number.isInteger(precision) ? precision : 5);\n\n  // Coordinates have variable length when encoded, so just keep\n  // track of whether we've hit the end of the string. In each\n  // loop iteration, a single coordinate is decoded.\n  while (index < str.length) {\n    // Reset shift, result, and byte\n    byte = null;\n    shift = 1;\n    result = 0;\n    do {\n      byte = str.charCodeAt(index++) - 63;\n      result += (byte & 0x1f) * shift;\n      shift *= 32;\n    } while (byte >= 0x20);\n    latitude_change = result & 1 ? (-result - 1) / 2 : result / 2;\n    shift = 1;\n    result = 0;\n    do {\n      byte = str.charCodeAt(index++) - 63;\n      result += (byte & 0x1f) * shift;\n      shift *= 32;\n    } while (byte >= 0x20);\n    longitude_change = result & 1 ? (-result - 1) / 2 : result / 2;\n    lat += latitude_change;\n    lng += longitude_change;\n    coordinates.push([lat / factor, lng / factor]);\n  }\n  return coordinates;\n};\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function (coordinates, precision) {\n  if (!coordinates.length) {\n    return '';\n  }\n  var factor = Math.pow(10, Number.isInteger(precision) ? precision : 5),\n    output = encode(coordinates[0][0], 0, factor) + encode(coordinates[0][1], 0, factor);\n  for (var i = 1; i < coordinates.length; i++) {\n    var a = coordinates[i],\n      b = coordinates[i - 1];\n    output += encode(a[0], b[0], factor);\n    output += encode(a[1], b[1], factor);\n  }\n  return output;\n};\nfunction flipped(coords) {\n  var flipped = [];\n  for (var i = 0; i < coords.length; i++) {\n    var coord = coords[i].slice();\n    flipped.push([coord[1], coord[0]]);\n  }\n  return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function (geojson, precision) {\n  if (geojson && geojson.type === 'Feature') {\n    geojson = geojson.geometry;\n  }\n  if (!geojson || geojson.type !== 'LineString') {\n    throw new Error('Input must be a GeoJSON LineString');\n  }\n  return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\n/**\n * Decodes to a GeoJSON LineString geometry.\n *\n * @param {String} str\n * @param {Number} precision\n * @returns {Object}\n */\npolyline.toGeoJSON = function (str, precision) {\n  var coords = polyline.decode(str, precision);\n  return {\n    type: 'LineString',\n    coordinates: flipped(coords)\n  };\n};\nif (typeof module === 'object' && module.exports) {\n  module.exports = polyline;\n}","map":{"version":3,"names":["polyline","py2_round","value","Math","floor","abs","encode","current","previous","factor","coordinate","output","String","fromCharCode","decode","str","precision","index","lat","lng","coordinates","shift","result","byte","latitude_change","longitude_change","pow","Number","isInteger","length","charCodeAt","push","i","a","b","flipped","coords","coord","slice","fromGeoJSON","geojson","type","geometry","Error","toGeoJSON","module","exports"],"sources":["C:/Users/shahv/Documents/real-time-traffic/frontend/node_modules/@mapbox/polyline/src/polyline.js"],"sourcesContent":["'use strict';\n\n/**\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\n\nvar polyline = {};\n\nfunction py2_round(value) {\n    // Google's polyline algorithm uses the same rounding strategy as Python 2, which is different from JS for negative values\n    return Math.floor(Math.abs(value) + 0.5) * (value >= 0 ? 1 : -1);\n}\n\nfunction encode(current, previous, factor) {\n    current = py2_round(current * factor);\n    previous = py2_round(previous * factor);\n    var coordinate = (current - previous) * 2;\n    if (coordinate < 0) {\n        coordinate = -coordinate - 1\n    }\n    var output = '';\n    while (coordinate >= 0x20) {\n        output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\n        coordinate /= 32;\n    }\n    output += String.fromCharCode((coordinate | 0) + 63);\n    return output;\n}\n\n/**\n * Decodes to a [latitude, longitude] coordinates array.\n *\n * This is adapted from the implementation in Project-OSRM.\n *\n * @param {String} str\n * @param {Number} precision\n * @returns {Array}\n *\n * @see https://github.com/Project-OSRM/osrm-frontend/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\n */\npolyline.decode = function(str, precision) {\n    var index = 0,\n        lat = 0,\n        lng = 0,\n        coordinates = [],\n        shift = 0,\n        result = 0,\n        byte = null,\n        latitude_change,\n        longitude_change,\n        factor = Math.pow(10, Number.isInteger(precision) ? precision : 5);\n\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index < str.length) {\n\n        // Reset shift, result, and byte\n        byte = null;\n        shift = 1;\n        result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result += (byte & 0x1f) * shift;\n            shift *= 32;\n        } while (byte >= 0x20);\n\n        latitude_change = (result & 1) ? ((-result - 1) / 2) : (result / 2);\n\n        shift = 1;\n        result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result += (byte & 0x1f) * shift;\n            shift *= 32;\n        } while (byte >= 0x20);\n\n        longitude_change = (result & 1) ? ((-result - 1) / 2) : (result / 2);\n\n        lat += latitude_change;\n        lng += longitude_change;\n\n        coordinates.push([lat / factor, lng / factor]);\n    }\n\n    return coordinates;\n};\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function(coordinates, precision) {\n    if (!coordinates.length) { return ''; }\n\n    var factor = Math.pow(10, Number.isInteger(precision) ? precision : 5),\n        output = encode(coordinates[0][0], 0, factor) + encode(coordinates[0][1], 0, factor);\n\n    for (var i = 1; i < coordinates.length; i++) {\n        var a = coordinates[i], b = coordinates[i - 1];\n        output += encode(a[0], b[0], factor);\n        output += encode(a[1], b[1], factor);\n    }\n\n    return output;\n};\n\nfunction flipped(coords) {\n    var flipped = [];\n    for (var i = 0; i < coords.length; i++) {\n        var coord = coords[i].slice();\n        flipped.push([coord[1], coord[0]]);\n    }\n    return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function(geojson, precision) {\n    if (geojson && geojson.type === 'Feature') {\n        geojson = geojson.geometry;\n    }\n    if (!geojson || geojson.type !== 'LineString') {\n        throw new Error('Input must be a GeoJSON LineString');\n    }\n    return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\n/**\n * Decodes to a GeoJSON LineString geometry.\n *\n * @param {String} str\n * @param {Number} precision\n * @returns {Object}\n */\npolyline.toGeoJSON = function(str, precision) {\n    var coords = polyline.decode(str, precision);\n    return {\n        type: 'LineString',\n        coordinates: flipped(coords)\n    };\n};\n\nif (typeof module === 'object' && module.exports) {\n    module.exports = polyline;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}